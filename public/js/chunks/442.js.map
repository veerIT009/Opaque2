{"version":3,"file":"js/chunks/442.js","mappings":"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","sources":["webpack:///./resources/pos/src/member/components/memberplan/MemberShipPlanMethod.js","webpack:///./resources/pos/src/member/store/actions/MembershipPaymentAction.js","webpack:///./resources/pos/src/member/store/actions/currentPlanAction.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Row, Col, Card, CardBody, Button } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProgressBar from \"../../../shared/progress-bar/ProgressBar\";\r\nimport HeaderTitle from \"../../../shared/header-title/HeaderTitle\";\r\nimport {\r\n    getFormattedMessage,\r\n    getFormattedOptions,\r\n} from \"../../../shared/sharedMethod\";\r\nimport { createMembershipPaymentSession } from \"../../store/actions/MembershipPaymentAction\";\r\nimport { fetchMembershipPlans } from \"../../store/actions/membershipPlanAction\";\r\nimport { fetchAllSettings } from \"../../store/actions/allSettingsAction\";\r\nimport { fetchCurrentPlanDetails } from \"../../store/actions/currentPlanAction\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { openModal } from \"../../../shared/custom-hooks\";\r\nimport OfflinePaymentModal from \"./OfflinePaymentModal\";\r\nimport { toggleModal } from \"../../../store/action/modalAction\";\r\n\r\nconst MemberShipPlanMethod = (props) => {\r\n    const {\r\n        membershipPlans,\r\n        match,\r\n        createMembershipPaymentSession,\r\n        paymentSessionId,\r\n        isLoading,\r\n        allSettings,\r\n        currentPlanDetails,\r\n        fetchCurrentPlanDetails,\r\n        fetchAllSettings,\r\n        fetchMembershipPlans,\r\n        toggleModal,\r\n    } = props;\r\n    const [isCreate, isEdit, isDelete, singlePlan, onOpenModal] = openModal();\r\n    const cardModalProps = {\r\n        singlePlan,\r\n        isCreate,\r\n        isEdit,\r\n        isDelete,\r\n        toggleModal,\r\n    };\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n    const [pubKey, setPubKey] = useState();\r\n    const navigate = useNavigate();\r\n\r\n    const planId = +params.id;\r\n    const plan = membershipPlans.filter((plan) => plan.id === planId)[0];\r\n\r\n    // console.log({ plan });\r\n\r\n    const loadScript = (url) => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = url;\r\n            script.onload = () => {\r\n                resolve(true);\r\n            };\r\n            script.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    if (!membershipPlans) {\r\n        return <ProgressBar />;\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchMembershipPlans(false, planId);\r\n        // fetchAllSettings();\r\n        // fetchCurrentPlanDetails();\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if (allSettings) {\r\n    //         setPubKey(\r\n    //             allSettings.stripe_key ? allSettings.stripe_key.value : null\r\n    //         );\r\n    //     }\r\n    // }, [allSettings]);\r\n\r\n    // useEffect(() => {\r\n    //     if (paymentSessionId) {\r\n    //         callToStripe(pubKey);\r\n    //     }\r\n    // }, [paymentSessionId]);\r\n\r\n    const callToStripe = async (pubKey) => {\r\n        const stripe = await loadStripe(`${pubKey}`);\r\n        const { err } = await stripe.redirectToCheckout({\r\n            sessionId: paymentSessionId,\r\n        });\r\n        dispatch(setLoading(false));\r\n    };\r\n\r\n    const clickOnRazorPay = () => {\r\n        // const res = await loadScript(\r\n        //     \"https://checkout.razorpay.com/v1/checkout.js\"\r\n        // );\r\n\r\n        // if (!res) {\r\n        //     alert(\"Razorpay SDK failed to load. Are you online?\");\r\n        //     return;\r\n        // }\r\n\r\n        // const options = {\r\n        //     key: process.env.MIX_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Dashboard\r\n        //     amount: plan.price * 100,\r\n        //     currency: \"INR\",\r\n        //     image: location.origin + \"/images/elibrary.png\",\r\n        //     name: \"Nagpur Elibrary\",\r\n        //     description: \"Test Transaction\",\r\n\r\n        //     prefill: {\r\n        //         name: \"Nagpur Elibrary\",\r\n        //         email: \"example@example.com\",\r\n        //         contact: \"9999999999\",\r\n        //     },\r\n        //     notes: {\r\n        //         address: \"Example Corporate Office\",\r\n        //     },\r\n        //     prefill: {\r\n        //         name: \"Nagpur Elibrary\",\r\n        //         email: \"test@example.com\",\r\n        //         contact: \"9999999999\",\r\n        //     },\r\n        //     theme: {\r\n        //         color: \"#61dafb\",\r\n        //     },\r\n        //     handler: (response) => {\r\n        //         if (response) {\r\n        //             const razorpay_payment_id = response.razorpay_payment_id;\r\n        //             const amount = process.env.MIX_AMOUNT;\r\n        //             createMembershipPaymentSession(planId, navigate);\r\n        //         }\r\n        //     },\r\n        // };\r\n\r\n        // const paymentObject = new window.Razorpay(options);\r\n        // if (plan) {\r\n        //     paymentObject.open();\r\n        // }\r\n        createMembershipPaymentSession(planId, navigate);\r\n    };\r\n\r\n    const clickOnOffLine = (isEdit, singlePlan = null, isDelete = false) => {\r\n        onOpenModal(isEdit, singlePlan, isDelete);\r\n        toggleModal();\r\n    };\r\n\r\n    return (\r\n        <section className=\"member_books_request\">\r\n            <div className=\"container\">\r\n                <div className=\"animated fadeIn\">\r\n                    <div className=\"section-title-center text-center\">\r\n                        <h2 className=\"display-6\">\r\n                            {getFormattedMessage(\"membership-plan.title\")}\r\n                        </h2>\r\n                        <div className=\"section-divider divider-traingle\"></div>\r\n                    </div>\r\n                    <div className=\"common-container\">\r\n                        <div className=\"w-100 h-100 d-flex justify-content-center align-items-center\">\r\n                            <Button\r\n                                onClick={() => clickOnRazorPay()}\r\n                                size=\"lg\"\r\n                                className=\"px-lg-4 py-lg-2 fs-6\"\r\n                                color=\"primary ml-2 text-white\"\r\n                            >\r\n                                Subscribe\r\n                            </Button>\r\n                            {/* <Button\r\n                                onClick={() => {\r\n                                    clickOnOffLine(true, plan);\r\n                                }}\r\n                                size=\"lg\"\r\n                                className=\"px-lg-4 py-lg-2  fs-6\"\r\n                                color=\"primary ml-2 text-white\"\r\n                            >\r\n                                {getFormattedMessage(\"pay-offline.label\")}\r\n                            </Button> */}\r\n                        </div>\r\n\r\n                        {/* <OfflinePaymentModal {...cardModalProps} /> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {\r\n        membershipPlans,\r\n        paymentSessionId,\r\n        isLoading,\r\n        allSettings,\r\n        currentPlanDetails,\r\n    } = state;\r\n    return {\r\n        membershipPlans,\r\n        paymentSessionId,\r\n        isLoading,\r\n        allSettings,\r\n        currentPlanDetails,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchMembershipPlans,\r\n    createMembershipPaymentSession,\r\n    fetchAllSettings,\r\n    toggleModal,\r\n    fetchCurrentPlanDetails,\r\n})(MemberShipPlanMethod);\r\n","import { membershipPlanActionType } from \"../../constants\";\r\nimport apiConfig from \"../../config/apiConfig\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\nimport { addToast } from \"../../../store/action/toastAction\";\r\nimport { toastType } from \"../../constants\";\r\nimport { apiBaseURL } from \"../../../constants\";\r\nimport { setUserProfile } from \"../../../store/action/localStorageAction\";\r\n\r\nexport const createMembershipPaymentSession =\r\n    (plan_id, navigate) => async (dispatch) => {\r\n        dispatch(setLoading(true));\r\n        await apiConfig\r\n            .post(apiBaseURL.CREATE_MEMBERSHIP_PAYMENT_SESSION + `/${plan_id}`)\r\n            .then((response) => {\r\n                if (response) {\r\n                    localStorage.setItem(\r\n                        \"member\",\r\n                        btoa(JSON.stringify(response.data.message.user))\r\n                    );\r\n                    dispatch({\r\n                        type: membershipPlanActionType.FETCH_SESSION_ID,\r\n                        payload: response.data.message.sessionId,\r\n                    });\r\n                    dispatch(\r\n                        addToast({\r\n                            text: \"Subscription Created Successfully\",\r\n                        })\r\n                    );\r\n                    dispatch(setLoading(false));\r\n                    navigate(\"/\");\r\n                }\r\n            })\r\n            .catch(({ response }) => {\r\n                if (response) {\r\n                    dispatch(\r\n                        addToast({\r\n                            text: response.data.message,\r\n                            type: toastType.ERROR,\r\n                        })\r\n                    );\r\n                }\r\n                dispatch(setLoading(false));\r\n            });\r\n    };\r\n","import {currentMembershipDetails, memberActionType} from '../../constants';\r\nimport apiConfig from '../../config/apiConfig';\r\nimport {setLoading} from '../../../store/action/progressBarAction';\r\nimport {addToast} from '../../../store/action/toastAction';\r\nimport {toastType} from '../../constants';\r\n\r\nexport const fetchCurrentPlanDetails = () => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    await apiConfig.get(`membership-details`)\r\n        .then((response) => {\r\n            dispatch({ type: currentMembershipDetails.FETCH_CURRENT_MEMBERSHIPDETAILS, payload: response.data.data });\r\n            dispatch(setLoading(false));\r\n        })\r\n        .catch(({ response }) => {\r\n            dispatch(addToast({ text: response.data.message, type: toastType.ERROR }));\r\n            dispatch(setLoading(false));\r\n        });\r\n};\r\n"],"names":["i","connect","state","membershipPlans","paymentSessionId","isLoading","allSettings","currentPlanDetails","fetchMembershipPlans","createMembershipPaymentSession","fetchAllSettings","toggleModal","fetchCurrentPlanDetails","props","match","openModal","params","useParams","useDispatch","useState","navigate","useNavigate","planId","id","filter","plan","useEffect","className","getFormattedMessage","onClick","size","color","plan_id","dispatch","setLoading","apiConfig","apiBaseURL","then","response","localStorage","setItem","btoa","JSON","stringify","data","message","user","type","membershipPlanActionType","payload","sessionId","addToast","text","toastType","currentMembershipDetails"],"sourceRoot":""}